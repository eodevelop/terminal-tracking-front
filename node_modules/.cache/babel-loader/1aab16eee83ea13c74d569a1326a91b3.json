{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\Side\\\\tx-temp-side-front\\\\src\\\\components\\\\Maps\\\\MapsContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useAsync } from \"react-async\";\nimport MapsPresenter from './MapsPresenter';\nimport apiService from '../../service/apiService.js';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MapsContainer = props => {\n  _s();\n\n  let {\n    data: vesselList\n  } = useAsync({\n    promiseFn: apiService.callVesselList,\n    locationId: 105160\n  });\n  let position = [35.0728, 128.8060];\n  let zoom = 14;\n  const multiPolygon = [[[35.07, 128.8075], [35.072, 128.8090], [35.075, 128.8090], [35.075, 128.8060], [35.072, 128.8060]]];\n  const purpleOptions = {\n    color: 'purple'\n  };\n\n  if (props.vesselList) {\n    vesselList.data = props.vesselList;\n    let latitude = 0;\n    let longitude = 0;\n    vesselList.data.forEach(vessel => {\n      latitude += vessel.latitude;\n      longitude += vessel.longitude;\n    });\n    latitude /= vesselList.data.length;\n    longitude /= vesselList.data.length;\n    position = [latitude, longitude];\n    console.log(position);\n  }\n\n  return /*#__PURE__*/_jsxDEV(MapsPresenter, {\n    position: position,\n    zoom: zoom,\n    multiPolygon: multiPolygon,\n    purpleOptions: purpleOptions,\n    vesselList: vesselList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapsContainer, \"prF+RLeMlIYxEdFxfWsyEVi0yMM=\", false, function () {\n  return [useAsync];\n});\n\n_c = MapsContainer;\n\nfunction getVesslList(state) {\n  return {\n    vesselList: state\n  };\n}\n\nexport default connect(getVesslList)(MapsContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"MapsContainer\");","map":{"version":3,"sources":["C:/workspace/Side/tx-temp-side-front/src/components/Maps/MapsContainer.jsx"],"names":["React","useAsync","MapsPresenter","apiService","connect","MapsContainer","props","data","vesselList","promiseFn","callVesselList","locationId","position","zoom","multiPolygon","purpleOptions","color","latitude","longitude","forEach","vessel","length","console","log","getVesslList","state"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,MAAI;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAuBP,QAAQ,CAAC;AAAEQ,IAAAA,SAAS,EAAEN,UAAU,CAACO,cAAxB;AAAwCC,IAAAA,UAAU,EAAC;AAAnD,GAAD,CAAnC;AACA,MAAIC,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,CAAf;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMC,YAAY,GAAG,CACjB,CACI,CAAC,KAAD,EAAQ,QAAR,CADJ,EAEI,CAAC,MAAD,EAAS,QAAT,CAFJ,EAGI,CAAC,MAAD,EAAS,QAAT,CAHJ,EAII,CAAC,MAAD,EAAS,QAAT,CAJJ,EAKI,CAAC,MAAD,EAAS,QAAT,CALJ,CADiB,CAArB;AAUA,QAAMC,aAAa,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAtB;;AAEA,MAAGV,KAAK,CAACE,UAAT,EAAoB;AAChBA,IAAAA,UAAU,CAACD,IAAX,GAAkBD,KAAK,CAACE,UAAxB;AAEA,QAAIS,QAAQ,GAAG,CAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;AAEAV,IAAAA,UAAU,CAACD,IAAX,CAAgBY,OAAhB,CAAwBC,MAAM,IAAI;AAC9BH,MAAAA,QAAQ,IAAIG,MAAM,CAACH,QAAnB;AACAC,MAAAA,SAAS,IAAIE,MAAM,CAACF,SAApB;AACH,KAHD;AAKAD,IAAAA,QAAQ,IAAIT,UAAU,CAACD,IAAX,CAAgBc,MAA5B;AACAH,IAAAA,SAAS,IAAIV,UAAU,CAACD,IAAX,CAAgBc,MAA7B;AAEAT,IAAAA,QAAQ,GAAG,CAACK,QAAD,EAAWC,SAAX,CAAX;AAEAI,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACH;;AAED,sBACI,QAAC,aAAD;AACI,IAAA,QAAQ,EAAEA,QADd;AAEI,IAAA,IAAI,EAAEC,IAFV;AAGI,IAAA,YAAY,EAAEC,YAHlB;AAII,IAAA,aAAa,EAAEC,aAJnB;AAKI,IAAA,UAAU,EAAEP;AALhB;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA5CD;;GAAMH,a;UACyBJ,Q;;;KADzBI,a;;AA8CN,SAASmB,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,SAAO;AACHjB,IAAAA,UAAU,EAAGiB;AADV,GAAP;AAGH;;AAED,eAAerB,OAAO,CAACoB,YAAD,CAAP,CAAsBnB,aAAtB,CAAf","sourcesContent":["import React from 'react';\r\nimport { useAsync } from \"react-async\"\r\nimport MapsPresenter from './MapsPresenter';\r\nimport apiService from '../../service/apiService.js';\r\nimport {connect} from 'react-redux';\r\n\r\nconst MapsContainer = (props) => {\r\n    let { data: vesselList } = useAsync({ promiseFn: apiService.callVesselList, locationId:105160 });\r\n    let position = [35.0728, 128.8060];\r\n    let zoom = 14;\r\n    const multiPolygon = [\r\n        [\r\n            [35.07, 128.8075],\r\n            [35.072, 128.8090],\r\n            [35.075, 128.8090],\r\n            [35.075, 128.8060],\r\n            [35.072, 128.8060],\r\n        ],\r\n    ]\r\n\r\n    const purpleOptions = { color: 'purple' }\r\n    \r\n    if(props.vesselList){\r\n        vesselList.data = props.vesselList;\r\n\r\n        let latitude = 0;\r\n        let longitude = 0;\r\n\r\n        vesselList.data.forEach(vessel => {\r\n            latitude += vessel.latitude;\r\n            longitude += vessel.longitude\r\n        });\r\n\r\n        latitude /= vesselList.data.length;\r\n        longitude /= vesselList.data.length;\r\n\r\n        position = [latitude, longitude];\r\n\r\n        console.log(position); \r\n    }\r\n\r\n    return (\r\n        <MapsPresenter\r\n            position={position}\r\n            zoom={zoom}\r\n            multiPolygon={multiPolygon}\r\n            purpleOptions={purpleOptions}\r\n            vesselList={vesselList}\r\n        />\r\n    );\r\n};\r\n\r\nfunction getVesslList(state) {\r\n    return {\r\n        vesselList : state\r\n    }\r\n}\r\n\r\nexport default connect(getVesslList)(MapsContainer);"]},"metadata":{},"sourceType":"module"}